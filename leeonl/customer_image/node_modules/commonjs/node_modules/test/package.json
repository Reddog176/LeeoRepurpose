{
  "name": "test",
  "version": "0.6.0",
  "description": "(Un)CommonJS test runner.",
  "keywords": [
    "test",
    "commonjs",
    "uncommonjs",
    "unit"
  ],
  "homepage": "https://github.com/Gozala/test-commonjs/",
  "author": {
    "name": "Irakli Gozalishvili",
    "email": "rfobic@gmail.com",
    "url": "http://jeditoolkit.com"
  },
  "contributors": [
    {
      "name": "Irakli Gozalishvili",
      "email": "rfobic@gmail.com",
      "url": "http://jeditoolkit.com"
    },
    {
      "name": "Kris Kowal",
      "email": "kris@cixar.com",
      "url": "http://github.com/kriskowal/"
    },
    {
      "name": "Zach Carter"
    },
    {
      "name": "Felix GeisendÃ¶rfer"
    },
    {
      "name": "Karl Guertin"
    },
    {
      "name": "Ash Berlin"
    },
    {
      "name": "Francois Lafortune"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Gozala/test-commonjs.git",
    "web": "https//github.com/Gozala/test-commonjs"
  },
  "bugs": {
    "url": "http://github.com/Gozala/test-commonjs/issues/"
  },
  "scripts": {
    "test": "npm run test-node && npm run test-browser",
    "test-browser": "node ./node_modules/phantomify/bin/cmd.js ./test/index.js",
    "test-node": "node ./test/index.js"
  },
  "main": "./test.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Gozala/test-commonjs/License.md"
    }
  ],
  "dependencies": {
    "ansi-font": "0.0.2"
  },
  "devDependencies": {
    "phantomify": "~0.x.0"
  },
  "readme": "# (Un)commonJS unit test runner\n\nImplementation of [(Un)commonJS unit test runner][UncommonJS unit test runner].\n\n[![build status](https://secure.travis-ci.org/Gozala/test-commonjs.png)](http://travis-ci.org/Gozala/test-commonjs)\n\n## Testing\n\nIn order to make your package testable from [npm] you should:\n\n- Create a directory in your package root.\n- Define test directory in package descriptor under `directories` section.\n- Define test script in package descriptor under `scripts` section.\n- Define dependency on this package (It's name is \"test\" in [npm] registry).\n- Write your tests\n- Test your package by running all tests `npm test`\n  or run individual tests `node ./path/to/test/group.js`\n\n## Example\n\n### package.json\n\n```js\n{\n  \"name\": \"mypackage\",\n  \"version\": \"0.7.0\",\n  \"description\": \"Sample package\",\n  \"scripts\": { \"test\": \"node test/all.js\" },\n  \"devDependencies\": { \"test\": \">=0.0.5\" }\n}\n```\n\n### Async test\n\n```js\n// if test function expects second named argument it will be executed\n// in async mode and test will be complete only after callback is called\nexports['test my async foo'] = function(assert, done) {\n  var http = require('http')\n  var google = http.createClient(80, 'www.jeditoolkit.com')\n  var request = google.request('GET', '/', {'host': 'www.jeditoolkit.com'})\n  request.end()\n  request.on('response', function (response) {\n    assert.equal(response.statusCode, 302, 'must redirect') // will log result\n    response.setEncoding('utf8')\n    response.on('data', function (chunk) {\n      assert.notEqual(chunk, 'helo world', 'must be something more inteligent')\n      done() // telling test runner that we're done with this test\n    })\n  })\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\n### Sync test\n\n```js\n// using assert passed to the test function that just logs failures\nexports['test that logs all failures'] = function(assert) {\n  assert.equal(2 + 2, 5, 'assert failure is logged')\n  assert.equal(3 + 2, 5, 'assert pass is logged')\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\n### Fast fail\n\n```js\n// using nodejs's build in asserts that throw on failure\nvar assert = require('assert')\n\nexports['test that stops execution on first failure'] = function() {\n  assert.equal(2 + 2, 5, 'assert fails and test execution stop here')\n  assert.equal(3 + 2, 5, 'will never pass this since test failed above')\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\n### Custom assertions\n\n```js\nvar AssertBase = require('assert').Assert\nvar AssertDescriptor = {\n  constructor: { value: Assert },\n  inRange: { value: function (lower, inner, upper, message) {\n    if (lower < inner && inner < upper) {\n      this.fail({\n        actual: inner,\n        expected: lower + '> ' + ' < ' + upper,\n        operator: \"inRange\",\n        message: message\n      })\n    } else {\n      this.pass(message);\n    }\n  }, enumerable: true }\n}\nfunction Assert() {\n  return Object.create(AssertBase.apply(null, arguments), AssertDescriptor)\n}\n\n// bundling custom asserts with test suite\nexports.Assert = Assert\nexports['test with custom asserts'] = function(assert) {\n  assert.inRange(2, 3, 5, 'passes assert and logs')\n  assert.equal(3 + 2, 5, 'assert pass is logged')\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\nFor more examples checkout tests for this package and for more details see\nthe [UncommonJS unit test runner] specification.\n\n[UncommonJS unit test runner]:https://github.com/kriskowal/uncommonjs/blob/master/tests/specification.md\n[npm]:http://npmjs.org/\n",
  "readmeFilename": "Readme.md",
  "_id": "test@0.6.0",
  "dist": {
    "shasum": "a4b03b3fa7135cfb10262d7b64903de3a063be56"
  },
  "_from": "test@>=0.0.5",
  "_resolved": "https://registry.npmjs.org/test/-/test-0.6.0.tgz"
}
